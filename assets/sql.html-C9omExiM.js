import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e}from"./app-Ds4AiUcn.js";const p={},t=e(`<h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><h3 id="单行注释" tabindex="-1"><a class="header-anchor" href="#单行注释"><span>单行注释</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 这是单行注释的内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="多行注释" tabindex="-1"><a class="header-anchor" href="#多行注释"><span>多行注释</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/*
 这
 是
 多
 行
 注
 释
 的
 内
 容
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看数据库" tabindex="-1"><a class="header-anchor" href="#查看数据库"><span>查看数据库</span></a></h2><p>该方法可以查看当前连接的所有数据库列表</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用数据库" tabindex="-1"><a class="header-anchor" href="#使用数据库"><span>使用数据库</span></a></h2><p>连接数据库成功后，需要使用哪个就使用<code>use</code>关键字进行使用，如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> mydb<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库"><span>创建数据库</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 直接创建数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mydb<span class="token punctuation">;</span>

<span class="token comment">-- 创建数据库之前无论有没有先删除一下</span>
<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> mydb<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mydb<span class="token punctuation">;</span>

<span class="token comment">-- 创建数据库之前条件判断一下是否存在，如果不存在才创建</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> mydb<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表"><span>创建表</span></a></h2><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><p>学会创建表之前，首先需要知道一些关于数据库数据类型的前置知识：</p><p>数据库数据类型有：</p><ul><li><code>int</code>-整型/整数</li><li><code>float</code>-浮点型/小数</li><li><code>char</code>-存在固定长度的字符串</li><li><code>varchar</code>-非固定长度的字符串，比如<code>varchar(6)</code>，字符串代表长度可以不固定，但是最大长度是6位</li><li><code>date</code>-时间格式，格式为：<code>yyyy-mm-dd</code></li><li><code>datetime</code>-时间的一种格式，格式为：<code>yyyy-mm-dd hh:mm:ss</code></li></ul><p>数据库表名是不区分大小写的，因此表名不可使用驼峰命名法，你可以使用大写，也可以使用小写，若两个单词需要连接，可以考虑采用下划线<code>_</code>进行连接，如<code>t_user</code>。</p><h3 id="约束类型" tabindex="-1"><a class="header-anchor" href="#约束类型"><span>约束类型</span></a></h3><p>创建表的语法格式为：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
	列名 数据类型 可选可不选的约束 <span class="token keyword">COMMENT</span> <span class="token string">&#39;字段代表意思&#39;</span><span class="token punctuation">,</span>
	列名 数据类型 <span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    外键约束
<span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;表意思&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的列名约束有：</p><ul><li><code>主键约束</code>：每张表都需要一个主键约束，并且有且只有一个，通常以数字作为主键，也可以是其它类型，使用主键约束的关键字为<code>PRIMARY KEY</code>，可配合<code>AUTO_INCREMENT</code>一起使用，实现主键自增。</li><li><code>唯一约束</code>：关键字为<code>unique</code>，使用了唯一约束后，该表的这一列保存的数据不能重复，通常可以对身份证这一类数据进行唯一约束。</li><li><code>非空约束</code>：关键字为<code>not null</code>，使用非空约束后，代表该表保存这一列的数据不能为空，比如该表保存的用户名、性别、注册时间这类数据不能为空。</li><li><code>默认值约束</code>：关键字为<code>default</code>，使用了默认值约束后，当插入数据时候，可以不填这一项数据，数据库保存的时候，会自动设置你在创建表时设置的默认值，格式如：<code>DEFAULT &#39;男&#39;</code></li></ul><p>外键约束：这个外键约束了另外一张表的主键，因为外键的存在，所以与另外一张表产生关系。此时就会诞生一种概念：<mark>主表</mark>、<mark>从表</mark>。</p><p>哪张表设置了外键约束关联，那张表就是从表。关联了哪张表的主键，那张表就是主表。</p><p>设置外键约束注意事项：</p><ol><li>创建的时候先创建主表，再创建从表。</li><li>删除的时候先删除从表，再删除主表。</li><li>从表的外键和主表外键数据类型应是一样的</li><li>主表的外键必须是主键。</li></ol><p>什么时候需要用到外键约束？</p><p>  场景假设：当一张表保存的是用户信息，比如用户姓名、年龄、性别等，另一张表保存的是用户的浏览记录，这个时候我们肯定会想到，肯定是先有用户才有的浏览记录，而不是先有该用户的浏览记录才有的该用户。此时可以用到外键约束，用户信息表是主表，用户的浏览器记录是从表，先创建用户信息主表，再创建用户浏览器记录从表。</p><p>语法示例：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建工作表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_job<span class="token punctuation">(</span>
	j_id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;表主键&#39;</span><span class="token punctuation">,</span>
	j_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;工作岗位名称，不能为空&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;工作岗位表&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建用户表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_user<span class="token punctuation">(</span>
	u_id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;表主键&#39;</span><span class="token punctuation">,</span>
    u_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名称，不能为空&#39;</span><span class="token punctuation">,</span>
	u_age <span class="token keyword">INT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户年龄&#39;</span><span class="token punctuation">,</span>
	u_sex <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户性别，默认值是‘男’&#39;</span><span class="token punctuation">,</span>
	u_tel <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户手机号，并且唯一不能重复&#39;</span><span class="token punctuation">,</span>
	u_j_id <span class="token keyword">INT</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户关联用户工作表的主键id&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">-- 设置外键约束，将u_j_id关联t_job的j_id</span>
	<span class="token keyword">CONSTRAINT</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>u_j_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> t_job<span class="token punctuation">(</span>j_id<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除表" tabindex="-1"><a class="header-anchor" href="#删除表"><span>删除表</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> t_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="修改表" tabindex="-1"><a class="header-anchor" href="#修改表"><span>修改表</span></a></h2><p>修改表设置的列属性：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 修改表名为t_user，添加t_address作为新列，数据类型是varchar(30)，约束为NOT NULL</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_user <span class="token keyword">ADD</span> t_address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改表名为t_user，修改t_address列名为t_merry，修改为数据类型是CHAR(2)，约束为NOT NULL</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_user CHANGE t_address t_merry  <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token comment">-- 删除表名为t_user的列名为t_merry的这一列</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_user <span class="token keyword">DROP</span> t_merry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看表" tabindex="-1"><a class="header-anchor" href="#查看表"><span>查看表</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="备份表" tabindex="-1"><a class="header-anchor" href="#备份表"><span>备份表</span></a></h2><p><code>create table 备份表表名 select * from 要备份的表名</code></p><h2 id="插入表数据" tabindex="-1"><a class="header-anchor" href="#插入表数据"><span>插入表数据</span></a></h2><p>三种方法：</p><ol><li><code>INSERT INTO 表名(列名,列名,列名...) VALUES(值,值,值....);</code>可选择添加数据，列名与数据要一一对应。</li><li><code>INSERT INTO 表名 VALUES(值,值,.....);</code>必须对应列名顺序，必须全部添加。</li><li><code>INSERT INTO 表名 VALUES (值,值,...) ,(),();</code>使用插入多条数据的时候。</li></ol><h2 id="删除表数据" tabindex="-1"><a class="header-anchor" href="#删除表数据"><span>删除表数据</span></a></h2><p>两种方法：</p><ol><li><code>DELETE from 表名</code>：直接删除表数据</li><li><code>DELETE from 表名 WHERE u_id=5;</code>：条件删除表数据</li><li><code>TRUNCATE TABLE 表名</code>：删除所有表数据，与<code>DELETE</code>关键字见下。</li></ol><p><code>DELETE</code>和<code>TRUNCATE</code>两者删除的区别： <code>DELETE</code>是假删，可以恢复的，比如自增长的id，新增id为1，删除id为1，但是新增后id从2开始的。 <code>TRUNCATE</code>常用于清空表的数据</p><h2 id="修改表数据" tabindex="-1"><a class="header-anchor" href="#修改表数据"><span>修改表数据</span></a></h2><ul><li><code>UPDATE 表名 set 列名 = 值</code> 会把某一列全部修改为某个值</li><li><code>UPDATE 表名 set 列名 = 值 WHERE u_id=1</code> 根据条件去指定修改某一行的数据</li></ul><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h2><h3 id="全量查询" tabindex="-1"><a class="header-anchor" href="#全量查询"><span>全量查询</span></a></h3><p>不带条件的查询，直接查出所有数据：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 仅查出表t_user的u_name这一列</span>
<span class="token keyword">SELECT</span> u_name <span class="token keyword">FROM</span> t_user
<span class="token comment">-- 查出表t_user的所有列</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user<span class="token punctuation">;</span>

<span class="token comment">-- 将查询后的列名取别名</span>

<span class="token comment">-- 利用 AS 关键字取别名</span>
<span class="token keyword">SELECT</span> u_name <span class="token keyword">AS</span> name <span class="token punctuation">,</span> u_age <span class="token keyword">AS</span> age <span class="token keyword">FROM</span> t_user<span class="token punctuation">;</span>
<span class="token comment">-- 也可不利用 AS 关键字取别名，但需要空格进行隔开</span>
<span class="token keyword">SELECT</span> u_name name <span class="token punctuation">,</span> u_age age <span class="token keyword">FROM</span> t_user<span class="token punctuation">;</span>
<span class="token comment">-- 也可将别名取为中文类型的</span>
<span class="token keyword">SELECT</span> u_name <span class="token keyword">AS</span> <span class="token string">&#39;姓名&#39;</span> <span class="token punctuation">,</span> u_age <span class="token keyword">AS</span> <span class="token string">&#39;年龄&#39;</span> <span class="token keyword">FROM</span> t_user<span class="token punctuation">;</span>

<span class="token comment">-- 查询后可以把查询后的的值计算返回(注意加应该是数字，不能是字符串)</span>

<span class="token comment">-- 没有通过计算正常查询的</span>
<span class="token keyword">SELECT</span> u_name<span class="token punctuation">,</span>u_age <span class="token keyword">FROM</span> t_user<span class="token punctuation">;</span>
<span class="token comment">-- 将年龄都 +10 后查询</span>
<span class="token keyword">SELECT</span> u_name<span class="token punctuation">,</span>u_age<span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">FROM</span> t_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询"><span>条件查询</span></a></h3><p>查询有常规利用<code>where</code>关键字进行查询，还可以有<mark>范围查询</mark>，如利用<code>&gt;</code>、<code>&lt;</code>、<code>=</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>!=</code>、<code>OR</code>、<code>IN</code>、<code>BETWEEN...AND...</code>、<code>AND</code>;<mark>模糊查询</mark>，如关键字<code>LIKE</code>。</p><p>常规查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 常规查询</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>范围查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 利用!=关键字 （筛选出年龄不等于18岁的用户）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_age<span class="token operator">!=</span><span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">-- 同时利用&gt;、&lt;=、AND关键字 （筛选出年龄大于18岁并且小于等于23岁的用户）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_age<span class="token operator">&gt;</span><span class="token number">18</span> <span class="token operator">AND</span> u_age<span class="token operator">&lt;=</span><span class="token number">23</span><span class="token punctuation">;</span>

<span class="token comment">-- 利用BETWEEN...AND...关键字 （筛选出年龄在18~23岁之间）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_age <span class="token operator">BETWEEN</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token number">23</span><span class="token punctuation">;</span>

<span class="token comment">-- 利用OR关键字 （筛选出年龄等于2、等于12、等于18的用户）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_age<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">OR</span> u_age<span class="token operator">=</span><span class="token number">12</span> <span class="token operator">OR</span> u_age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">-- 利用IN关键字 (筛选出年龄在18~22岁之间的用户)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模糊查询，关键字<code>LIKE</code>，其中<code>%</code>代表任意长度的字符，<code>_</code>代表一个长度的字符</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 开头是老（长度不限）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_name <span class="token operator">like</span> <span class="token string">&#39;老%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 中间是（长度不限）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_name <span class="token operator">like</span> <span class="token string">&#39;%王%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 开头是老（长度限两位）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_name <span class="token operator">like</span> <span class="token string">&#39;老_&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 中间是老（长度限三位）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> u_name <span class="token operator">like</span> <span class="token string">&#39;_老_&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询去重" tabindex="-1"><a class="header-anchor" href="#查询去重"><span>查询去重</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> sage <span class="token keyword">from</span> t_student
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="限制查询条数" tabindex="-1"><a class="header-anchor" href="#限制查询条数"><span>限制查询条数</span></a></h3><p>使用<code>LIMIT</code>，规则与JavaScript普遍一样，都是前包括后不包括，比如<code>LIMIT(0,2)</code>，只会返回第0、第1条。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="非空查询" tabindex="-1"><a class="header-anchor" href="#非空查询"><span>非空查询</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询列名ssex为空的数据</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">where</span> ssex <span class="token operator">is</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询列名ssex不为空的数据</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">where</span> ssex <span class="token operator">is</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询列名sgrade为空字符串的数据</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">where</span> sgrade<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询排序" tabindex="-1"><a class="header-anchor" href="#查询排序"><span>查询排序</span></a></h3><p>关键字<code>ORDER BY xx</code>-按什么进行分组、<code>DESC</code>-从大到小排、<code>ASC</code>-从小到大排序，不加该关键字默认是从小到大排序</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 按照sage从小到大进行排序</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sage<span class="token punctuation">;</span>
<span class="token comment">-- 按照sage从大到小进行排序</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sage <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment">-- 按照sage从大到小排序，再按照sno从大到小进行排序</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sage <span class="token keyword">DESC</span><span class="token punctuation">,</span>sno <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="from-子查询" tabindex="-1"><a class="header-anchor" href="#from-子查询"><span>FROM 子查询</span></a></h3><p>在<code>from</code>关键字里面的子查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span><span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span>
<span class="token punctuation">)</span> <span class="token keyword">AS</span> 别名（必须需要一个别名）
<span class="token keyword">WHERE</span>
  条件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="where-子查询" tabindex="-1"><a class="header-anchor" href="#where-子查询"><span>WHERE 子查询</span></a></h3><p>在关键字<code>WHERE</code>内的子查询</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_student
<span class="token keyword">WHERE</span> s_class_id <span class="token operator">=</span> <span class="token punctuation">(</span>
		<span class="token keyword">SELECT</span> c_id
		<span class="token keyword">FROM</span> t_class
		<span class="token keyword">WHERE</span> c_name<span class="token operator">=</span><span class="token string">&#39;班级1&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="column-子查询" tabindex="-1"><a class="header-anchor" href="#column-子查询"><span>column 子查询</span></a></h3><p>在“列”里面的子查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> s_name<span class="token punctuation">,</span><span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> s_class_id
	<span class="token keyword">FROM</span> t_class <span class="token keyword">AS</span> t2
	<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>s_class_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>c_id
<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> t_student <span class="token keyword">AS</span> t1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表连接" tabindex="-1"><a class="header-anchor" href="#表连接"><span>表连接</span></a></h2><p>表连接分为：</p><ul><li>自连接，关键字：<code>表1 INNER JOIN 表2</code></li><li>全连接，关键字：<code>表1 JOIN 表2 ON 表1.列名 = 表2.列名</code></li><li>左连接，关键字：<code>表1 LEFT JOIN 表2 ON 表1.表1的列名 = 表2.表2的列名</code>。</li><li>右连接，关键字：<code>表1 RIGHT JOIN 表2 ON 表1.表1的列名 = 表2.表2的列名</code></li><li>交叉连接，关键字：<code>表1 CROSS JOIN 表2 ON 表1.表1的列名 = 表2.表2的列名</code></li></ul><p>左连接、右连接、自连接、全连接</p><h3 id="自连接-内连接" tabindex="-1"><a class="header-anchor" href="#自连接-内连接"><span>自连接/内连接</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> e1<span class="token punctuation">.</span>name <span class="token keyword">AS</span> Employee<span class="token punctuation">,</span> e2<span class="token punctuation">.</span>name <span class="token keyword">AS</span> Manager
<span class="token keyword">FROM</span> employees e1
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> employees e2 <span class="token keyword">ON</span> e1<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> e2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面语句可以不加<code>INNER</code>关键字也是起作用的，加不加都是自连接，加上相当于显示自连接，不加相当于隐式自连接。</p><h3 id="全连接" tabindex="-1"><a class="header-anchor" href="#全连接"><span>全连接</span></a></h3><p>使用关键字<code>表1 JOIN 表2 ON 表1.表1的列名 = 表2.表2的列名</code></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_a <span class="token keyword">JOIN</span> t_b <span class="token keyword">ON</span>  t_a<span class="token punctuation">.</span>a_b_id <span class="token operator">=</span> t_b<span class="token punctuation">.</span>b_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="左连接" tabindex="-1"><a class="header-anchor" href="#左连接"><span>左连接</span></a></h3><p>保全左边的数据，使用左连接，左连接使用关键字<code>表1 LEFT JOIN 表2 ON 表1.表1的列名 = 表2.表2的列名</code>，如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_a <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_b <span class="token keyword">ON</span>  t_a<span class="token punctuation">.</span>a_b_id <span class="token operator">=</span> t_b<span class="token punctuation">.</span>b_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="右连接" tabindex="-1"><a class="header-anchor" href="#右连接"><span>右连接</span></a></h3><p>保全右边的数据，使用右连接，右连接使用关键字<code>表1 RIGHT JOIN 表2 ON 表1.表1的列名 = 表2.表2的列名</code>，如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_a <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_b <span class="token keyword">ON</span>  t_a<span class="token punctuation">.</span>a_b_id <span class="token operator">=</span> t_b<span class="token punctuation">.</span>b_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交叉连接" tabindex="-1"><a class="header-anchor" href="#交叉连接"><span>交叉连接</span></a></h3><p>左表的每一个记录，对应右表的全部记录。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	<span class="token operator">*</span> 
<span class="token keyword">FROM</span>
	left_table
	<span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> right_table <span class="token keyword">ON</span> left_table<span class="token punctuation">.</span>left_id <span class="token operator">=</span> right_table<span class="token punctuation">.</span>right_id

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数"><span>聚合函数</span></a></h2><ul><li><code>COUNT()</code>：统计数量</li><li><code>AVG()</code>：平均值</li><li><code>MIN()</code>：最小值</li><li><code>MAX()</code>：最大值</li><li><code>SUM()</code>：求和</li></ul><p>在使用过程中还可能使用到其它关键字：<code>IFNULL</code>、<code>HAVING</code>、<code>GROUP BY</code></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 不会把列名sno为null的数据统计进去</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>sno<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span>
<span class="token comment">-- 统计表t_student有多少条数据</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span>


<span class="token comment">-- 求平均</span>
<span class="token comment">-- (一般如果有一列为null，最后除的时候，这一条不算)</span>
<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>sage<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span>
<span class="token comment">-- 如果想让null参与运算 IFNULL,如果是null就为0，关键字是IFNULL</span>
<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>IFNULL<span class="token punctuation">(</span>sage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span>

<span class="token comment">-- 最小值 </span>
<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>sage<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span>

<span class="token comment">-- 最大值 </span>
<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>sage<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span>

<span class="token comment">-- 求和 </span>
<span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>sage<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分组查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 分组查询 GROUP BY (null会参与)   一般分组都是和统计一起使用</span>
<span class="token keyword">SELECT</span> ssex <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> ssex<span class="token punctuation">;</span>

<span class="token comment">-- 分组和统计可以在一起使用</span>
<span class="token keyword">SELECT</span> ssex<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>ssex<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> ssex<span class="token punctuation">;</span>

<span class="token comment">-- 分组统计后在进行筛选</span>
<span class="token keyword">SELECT</span> ssex<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>ssex<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> ssex <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>ssex<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于查询补充" tabindex="-1"><a class="header-anchor" href="#关于查询补充"><span>关于查询补充</span></a></h2><p>查询的完整数据格式：<code>SELECT 去重 列名|*|聚合函数 FROM 表名 WHERE 条件 HAVING 分组统计后的筛选 ORDER BY 排序</code>。</p><p>它的执行顺序为：<code>FROM &gt; WHERE &gt;S ELECT &gt; GROUP BY &gt; COUNT() &gt; HAVING &gt; ORDER BY</code></p><h2 id="基于-nodejs-express-实践" tabindex="-1"><a class="header-anchor" href="#基于-nodejs-express-实践"><span>基于 Nodejs + Express 实践</span></a></h2><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>封装成公共方法：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">function</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token parameter">sql<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> myserver <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;数据库ip地址&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;数据库连接用户名&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;数据库连接密码&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;连接的数据名名&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment">// 端口号，默认3306，若修改了需要重新指定端口号</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  myserver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  myserver<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

  myserver<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> db<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../utils/db&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/getCourseClass&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token string">&#39;SELECT * FROM o_course;&#39;</span>
    <span class="token function">db</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">500</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">.</span>length <span class="token operator">?</span> data <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,116),l=[t];function o(c,i){return n(),a("div",null,l)}const u=s(p,[["render",o],["__file","sql.html.vue"]]),k=JSON.parse(`{"path":"/back/sql.html","title":"SQL语句","lang":"zh-CN","frontmatter":{"title":"SQL语句","date":"2022-03-01T00:00:00.000Z","icon":"sql","order":1,"description":"注释 单行注释 多行注释 查看数据库 该方法可以查看当前连接的所有数据库列表 使用数据库 连接数据库成功后，需要使用哪个就使用use关键字进行使用，如： 创建数据库 创建表 数据类型 学会创建表之前，首先需要知道一些关于数据库数据类型的前置知识： 数据库数据类型有： int-整型/整数 float-浮点型/小数 char-存在固定长度的字符串 varc...","head":[["meta",{"property":"og:url","content":"https://github.com/xinyang424/back/sql.html"}],["meta",{"property":"og:site_name","content":"XinYang"}],["meta",{"property":"og:title","content":"SQL语句"}],["meta",{"property":"og:description","content":"注释 单行注释 多行注释 查看数据库 该方法可以查看当前连接的所有数据库列表 使用数据库 连接数据库成功后，需要使用哪个就使用use关键字进行使用，如： 创建数据库 创建表 数据类型 学会创建表之前，首先需要知道一些关于数据库数据类型的前置知识： 数据库数据类型有： int-整型/整数 float-浮点型/小数 char-存在固定长度的字符串 varc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"XinYang's Blog"}],["meta",{"property":"article:published_time","content":"2022-03-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL语句\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XinYang's Blog\\",\\"url\\":\\"https://xinyang424.com\\"}]}"]]},"headers":[{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[{"level":3,"title":"单行注释","slug":"单行注释","link":"#单行注释","children":[]},{"level":3,"title":"多行注释","slug":"多行注释","link":"#多行注释","children":[]}]},{"level":2,"title":"查看数据库","slug":"查看数据库","link":"#查看数据库","children":[]},{"level":2,"title":"使用数据库","slug":"使用数据库","link":"#使用数据库","children":[]},{"level":2,"title":"创建数据库","slug":"创建数据库","link":"#创建数据库","children":[]},{"level":2,"title":"创建表","slug":"创建表","link":"#创建表","children":[{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"约束类型","slug":"约束类型","link":"#约束类型","children":[]}]},{"level":2,"title":"删除表","slug":"删除表","link":"#删除表","children":[]},{"level":2,"title":"修改表","slug":"修改表","link":"#修改表","children":[]},{"level":2,"title":"查看表","slug":"查看表","link":"#查看表","children":[]},{"level":2,"title":"备份表","slug":"备份表","link":"#备份表","children":[]},{"level":2,"title":"插入表数据","slug":"插入表数据","link":"#插入表数据","children":[]},{"level":2,"title":"删除表数据","slug":"删除表数据","link":"#删除表数据","children":[]},{"level":2,"title":"修改表数据","slug":"修改表数据","link":"#修改表数据","children":[]},{"level":2,"title":"查询","slug":"查询","link":"#查询","children":[{"level":3,"title":"全量查询","slug":"全量查询","link":"#全量查询","children":[]},{"level":3,"title":"条件查询","slug":"条件查询","link":"#条件查询","children":[]},{"level":3,"title":"查询去重","slug":"查询去重","link":"#查询去重","children":[]},{"level":3,"title":"限制查询条数","slug":"限制查询条数","link":"#限制查询条数","children":[]},{"level":3,"title":"非空查询","slug":"非空查询","link":"#非空查询","children":[]},{"level":3,"title":"查询排序","slug":"查询排序","link":"#查询排序","children":[]},{"level":3,"title":"FROM 子查询","slug":"from-子查询","link":"#from-子查询","children":[]},{"level":3,"title":"WHERE 子查询","slug":"where-子查询","link":"#where-子查询","children":[]},{"level":3,"title":"column 子查询","slug":"column-子查询","link":"#column-子查询","children":[]}]},{"level":2,"title":"表连接","slug":"表连接","link":"#表连接","children":[{"level":3,"title":"自连接/内连接","slug":"自连接-内连接","link":"#自连接-内连接","children":[]},{"level":3,"title":"全连接","slug":"全连接","link":"#全连接","children":[]},{"level":3,"title":"左连接","slug":"左连接","link":"#左连接","children":[]},{"level":3,"title":"右连接","slug":"右连接","link":"#右连接","children":[]},{"level":3,"title":"交叉连接","slug":"交叉连接","link":"#交叉连接","children":[]}]},{"level":2,"title":"聚合函数","slug":"聚合函数","link":"#聚合函数","children":[]},{"level":2,"title":"关于查询补充","slug":"关于查询补充","link":"#关于查询补充","children":[]},{"level":2,"title":"基于 Nodejs + Express 实践","slug":"基于-nodejs-express-实践","link":"#基于-nodejs-express-实践","children":[]}],"git":{"contributors":[{"name":"coder-new","email":"2578417052@qq.com","commits":1}]},"readingTime":{"minutes":10.53,"words":3160},"filePathRelative":"back/sql.md","localizedDate":"2022年3月1日","autoDesc":true}`);export{u as comp,k as data};
