import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,e as s}from"./app-Ds4AiUcn.js";const t={},i=s(`<p>CSS Grid布局是二维布局，该布局方式可以同时控制行和列的排布和对齐方式，Grid有水平线和垂直线构成，有行轨道和列轨道之分，开启grid布局仅需要：<code>display:grid</code>即可，容器的子元素就会自动成为grid布局的元素。</p><h2 id="gird-template-columns" tabindex="-1"><a class="header-anchor" href="#gird-template-columns"><span>gird-template-columns</span></a></h2><p>控制容器的宽度，如何单位为px则为固定宽度，如何是fr，则会自适应。</p><h2 id="column-gap" tabindex="-1"><a class="header-anchor" href="#column-gap"><span>column-gap</span></a></h2><p><code>column-gap</code>控制容器之间每一列之间的距离。</p><h2 id="row-gap" tabindex="-1"><a class="header-anchor" href="#row-gap"><span>row-gap</span></a></h2><p><code>row-gap</code>控制容器之间每一行之间的距离。</p><h2 id="gap" tabindex="-1"><a class="header-anchor" href="#gap"><span>gap</span></a></h2><p><code>gap</code>即是同时设计<code>column-gap</code>和<code>row-gap</code>。</p><h2 id="grid-template-areas" tabindex="-1"><a class="header-anchor" href="#grid-template-areas"><span>grid-template-areas</span></a></h2><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* 父元素 */</span>
<span class="token selector">.container</span><span class="token punctuation">{</span>
    <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>
        <span class="token string">&quot;header header header&quot;</span>
        <span class="token string">&quot;siderbar content content&quot;</span>
        <span class="token string">&quot;footer footer footer&quot;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token comment">/* 子元素 */</span>
<span class="token selector">header</span><span class="token punctuation">{</span>
    <span class="token property">grid-area</span><span class="token punctuation">:</span>header<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">main</span><span class="token punctuation">{</span>
    <span class="token property">grid-area</span><span class="token punctuation">:</span>content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">aside</span><span class="token punctuation">{</span>
    <span class="token property">grid-area</span><span class="token punctuation">:</span>siderbar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">footer</span><span class="token punctuation">{</span>
    <span class="token property">grid-area</span><span class="token punctuation">:</span>footer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更多" tabindex="-1"><a class="header-anchor" href="#更多"><span>更多</span></a></h2><p>flex布局开启后有主轴和侧轴，而grid布局开启后有行轴和块轴，grid控制行轴和块轴排列方式的属性和值与flex布局控制主轴和侧轴排列方式类似。</p>`,13),p=[i];function l(r,o){return a(),e("div",null,p)}const u=n(t,[["render",l],["__file","grid.html.vue"]]),m=JSON.parse(`{"path":"/web/css/grid.html","title":"Grid 布局","lang":"zh-CN","frontmatter":{"title":"Grid 布局","date":"2022-03-01T00:00:00.000Z","category":["CSS"],"description":"CSS Grid布局是二维布局，该布局方式可以同时控制行和列的排布和对齐方式，Grid有水平线和垂直线构成，有行轨道和列轨道之分，开启grid布局仅需要：display:grid即可，容器的子元素就会自动成为grid布局的元素。 gird-template-columns 控制容器的宽度，如何单位为px则为固定宽度，如何是fr，则会自适应。 colum...","head":[["meta",{"property":"og:url","content":"https://github.com/xinyang424/web/css/grid.html"}],["meta",{"property":"og:site_name","content":"XinYang"}],["meta",{"property":"og:title","content":"Grid 布局"}],["meta",{"property":"og:description","content":"CSS Grid布局是二维布局，该布局方式可以同时控制行和列的排布和对齐方式，Grid有水平线和垂直线构成，有行轨道和列轨道之分，开启grid布局仅需要：display:grid即可，容器的子元素就会自动成为grid布局的元素。 gird-template-columns 控制容器的宽度，如何单位为px则为固定宽度，如何是fr，则会自适应。 colum..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"XinYang's Blog"}],["meta",{"property":"article:published_time","content":"2022-03-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Grid 布局\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XinYang's Blog\\",\\"url\\":\\"https://xinyang424.com\\"}]}"]]},"headers":[{"level":2,"title":"gird-template-columns","slug":"gird-template-columns","link":"#gird-template-columns","children":[]},{"level":2,"title":"column-gap","slug":"column-gap","link":"#column-gap","children":[]},{"level":2,"title":"row-gap","slug":"row-gap","link":"#row-gap","children":[]},{"level":2,"title":"gap","slug":"gap","link":"#gap","children":[]},{"level":2,"title":"grid-template-areas","slug":"grid-template-areas","link":"#grid-template-areas","children":[]},{"level":2,"title":"更多","slug":"更多","link":"#更多","children":[]}],"git":{"contributors":[{"name":"coder-new","email":"2578417052@qq.com","commits":1}]},"readingTime":{"minutes":0.92,"words":277},"filePathRelative":"web/css/grid.md","localizedDate":"2022年3月1日","autoDesc":true}`);export{u as comp,m as data};
