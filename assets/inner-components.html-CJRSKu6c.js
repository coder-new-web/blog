import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a,d as n,b as l,e as s}from"./app-Ds4AiUcn.js";const i={},u=s(`<h3 id="transition" tabindex="-1"><a class="header-anchor" href="#transition"><span>Transition</span></a></h3><p><code>Transition</code>是一个内置组件，这意味着它在任意位置都是可以直接被使用而无需注册。它可以将进入和离开的动画应用到通过默认插槽传递给它的元素或组件上。进入或离开都可以由以下的条件之一触发：</p><ul><li><p>由<code>v-if</code>所触发的切换</p></li><li><p>由<code>v-show</code>所触发的切换</p></li><li><p>由特殊元素<code>&lt;component&gt;</code>切换的动态组件</p></li><li><p>改变特殊的<code>key</code>属性</p></li></ul><blockquote><p>注意</p><p><code>&lt;Transition&gt;</code>仅支持单个元素或组件作为其插槽的内容。如果内容是一个组件，这个组件必须仅有一个根元素。</p></blockquote><h3 id="transitiongroup" tabindex="-1"><a class="header-anchor" href="#transitiongroup"><span>TransitionGroup</span></a></h3><h3 id="keepalive" tabindex="-1"><a class="header-anchor" href="#keepalive"><span>KeepAlive</span></a></h3><h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 非活跃的组件将会被缓存！ --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>activeComponent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="包含-排除" tabindex="-1"><a class="header-anchor" href="#包含-排除"><span>包含/排除</span></a></h4><p><code>&lt;KeepAlive&gt;</code> 默认会缓存内部的所有组件实例，但我们可以通过 <code>include</code> 和 <code>exclude</code> prop 来定制该行为。这两个 prop 的值都可以是一个以英文逗号分隔的字符串、一个正则表达式，或是包含这两种类型的一个数组：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 以英文逗号分隔的字符串 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a,b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 正则表达式 (需使用 \`v-bind\`) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/a|b/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 数组 (需使用 \`v-bind\`) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;a&#39;, &#39;b&#39;]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会根据组件的 name 选项进行匹配，所以组件如果想要条件性地被 <code>KeepAlive</code> 缓存，就必须显式声明一个 <code>name</code> 选项。</p><blockquote><p>注意</p><p>在 3.2.34 或以上的版本，使用<code>&lt;script setup&gt;</code> 的单文件组件会自动根据文件名生成对应的<code>name</code>选项，无需再手动声明。</p></blockquote><p>如以下代码无需手动声明：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;my-component&quot;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="最大缓存实例数" tabindex="-1"><a class="header-anchor" href="#最大缓存实例数"><span>最大缓存实例数</span></a></h4>`,16),d=a("code",null,"max",-1),r=a("code",null,"<KeepAlive>",-1),k=a("code",null,"max",-1),v={href:"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)",target:"_blank",rel:"noopener noreferrer"},g=s(`<div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span> <span class="token attr-name">:max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>activeComponent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="缓存实例的生命周期" tabindex="-1"><a class="header-anchor" href="#缓存实例的生命周期"><span>缓存实例的生命周期</span></a></h4><p>当一个组件实例从 DOM 上移除但因为被<code>&lt;KeepAlive&gt;</code>缓存而仍作为组件树的一部分时，它将变为<strong>不活跃</strong>状态而不是被卸载。当一个组件实例作为缓存树的一部分插入到 DOM 中时，它将重新<strong>被激活</strong>。</p><p>一个持续存在的组件可以通过<code>onActivated()</code>和<code>onDeactivated()</code>注册相应的两个状态的生命周期钩子函数：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> onActivated<span class="token punctuation">,</span> onDeactivated <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token function">onActivated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用时机为首次挂载</span>
  <span class="token comment">// 以及每次从缓存中被重新插入时</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">onDeactivated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在从 DOM 上移除、进入缓存</span>
  <span class="token comment">// 以及组件卸载时调用</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意：</p><ul><li><code>onActivated</code>在组件挂载时也会调用，并且<code>onDeactivated</code>在组件卸载时也会调用。</li><li>这两个钩子不仅适用于<code>&lt;KeepAlive&gt;</code>缓存的根组件，也适用于缓存树中的后代组件。</li></ul><hr><h3 id="teleport" tabindex="-1"><a class="header-anchor" href="#teleport"><span>Teleport</span></a></h3><p><code>&lt;Teleport&gt;</code>是一个内置组件，它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。</p><p><code>&lt;Teleport&gt;</code>组件内可以是 DOM 结构，也可以是组件，利用设置props<code>to</code>传送到目标节点，可以是HTML标签，也可以是类名或id名。</p><p>若想禁用 <code>&lt;Teleport&gt;</code>，可以设置<code>disabled</code>为<code>true</code></p><h4 id="禁用-teleport" tabindex="-1"><a class="header-anchor" href="#禁用-teleport"><span>禁用 Teleport</span></a></h4><p>在某些场景下可能需要视情况禁用<code>&lt;Teleport&gt;</code>。举例来说，我们想要在桌面端将一个组件当作浮层来渲染，但在移动端则当作行内组件。我们可以通过对<code>&lt;Teleport&gt;</code>动态地传入一个<code>disabled</code>prop来处理这两种情况：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isMobile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Teleport</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>isMobile</code> 状态可以根据 CSS media query 的不同结果动态地更新。</p><h4 id="多个-teleport-共享目标" tabindex="-1"><a class="header-anchor" href="#多个-teleport-共享目标"><span>多个 Teleport 共享目标</span></a></h4><p>一个可重用的模态框可能同事存在多个实例。对于此类场景，若个<code>&lt;Teleport&gt;</code>组件可以将其内容挂载在同一个目标元素上，而顺序就是简单的顺次追加，后挂载的将排在目标元素下更后面的位置上。如下：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#modals<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Teleport</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#modals<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Teleport</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 渲染为： --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modals<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="suspense" tabindex="-1"><a class="header-anchor" href="#suspense"><span>Suspense</span></a></h3>`,20);function m(b,h){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,a("p",null,[n("我们可以通过传入 "),d,n(" prop 来限制可被缓存的最大组件实例数。"),r,n(" 的行为在指定了 "),k,n(" 后类似一个 "),a("a",v,[n("LRU 缓存"),l(t)]),n("：如果缓存的实例数量即将超过指定的那个最大数量，则最久没有被访问的缓存实例将被销毁，以便为新的实例腾出空间。")]),g])}const _=e(i,[["render",m],["__file","inner-components.html.vue"]]),x=JSON.parse(`{"path":"/web/vue3/inner-components.html","title":"内置组件","lang":"zh-CN","frontmatter":{"title":"内置组件","date":"2024-04-25T00:00:00.000Z","category":["vue3"],"description":"Transition Transition是一个内置组件，这意味着它在任意位置都是可以直接被使用而无需注册。它可以将进入和离开的动画应用到通过默认插槽传递给它的元素或组件上。进入或离开都可以由以下的条件之一触发： 由v-if所触发的切换 由v-show所触发的切换 由特殊元素<component>切换的动态组件 改变特殊的key属性 注意 <Trans...","head":[["meta",{"property":"og:url","content":"https://github.com/xinyang424/web/vue3/inner-components.html"}],["meta",{"property":"og:site_name","content":"XinYang"}],["meta",{"property":"og:title","content":"内置组件"}],["meta",{"property":"og:description","content":"Transition Transition是一个内置组件，这意味着它在任意位置都是可以直接被使用而无需注册。它可以将进入和离开的动画应用到通过默认插槽传递给它的元素或组件上。进入或离开都可以由以下的条件之一触发： 由v-if所触发的切换 由v-show所触发的切换 由特殊元素<component>切换的动态组件 改变特殊的key属性 注意 <Trans..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"XinYang's Blog"}],["meta",{"property":"article:published_time","content":"2024-04-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内置组件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XinYang's Blog\\",\\"url\\":\\"https://xinyang424.com\\"}]}"]]},"headers":[{"level":3,"title":"Transition","slug":"transition","link":"#transition","children":[]},{"level":3,"title":"TransitionGroup","slug":"transitiongroup","link":"#transitiongroup","children":[]},{"level":3,"title":"KeepAlive","slug":"keepalive","link":"#keepalive","children":[]},{"level":3,"title":"Teleport","slug":"teleport","link":"#teleport","children":[]},{"level":3,"title":"Suspense","slug":"suspense","link":"#suspense","children":[]}],"git":{"contributors":[{"name":"coder-new","email":"2578417052@qq.com","commits":1}]},"readingTime":{"minutes":3.69,"words":1107},"filePathRelative":"web/vue3/inner-components.md","localizedDate":"2024年4月25日","autoDesc":true}`);export{_ as comp,x as data};
