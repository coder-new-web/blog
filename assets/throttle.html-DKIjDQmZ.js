import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-Ds4AiUcn.js";const e={},o=t(`<h2 id="节流函数" tabindex="-1"><a class="header-anchor" href="#节流函数"><span>节流函数</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeoutId<span class="token punctuation">;</span>
  <span class="token keyword">let</span> lastExecTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> currentTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> timeSinceLastExec <span class="token operator">=</span> currentTime <span class="token operator">-</span> lastExecTime<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeSinceLastExec <span class="token operator">&gt;</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      lastExecTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        lastExecTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> delay <span class="token operator">-</span> timeSinceLastExec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong> The code above is a JavaScript implementation of a throttle function. The throttle function takes in two parameters: <code>func</code>, which is the function to be throttled, and <code>delay</code>, which is the time in milliseconds to wait before invoking the function again.</p><p>The throttle function returns a new function that can be called instead of the original function. This new function will only invoke the original function once every <code>delay</code> milliseconds. If the new function is called again before the delay has elapsed, the function will not be invoked and the timer is reset.</p><p>This is useful for scenarios where you want to limit the rate at which a function is called, such as when handling user input events like scrolling or resizing the window.</p>`,5),p=[o];function c(i,l){return a(),s("div",null,p)}const d=n(e,[["render",c],["__file","throttle.html.vue"]]),k=JSON.parse(`{"path":"/web/practical-skills/throttle.html","title":"节流","lang":"zh-CN","frontmatter":{"title":"节流","date":"2022-03-01T00:00:00.000Z","category":["实用技巧"],"description":"节流函数 解释： The code above is a JavaScript implementation of a throttle function. The throttle function takes in two parameters: func, which is the function to be throttled, and de...","head":[["meta",{"property":"og:url","content":"https://github.com/xinyang424/web/practical-skills/throttle.html"}],["meta",{"property":"og:site_name","content":"XinYang"}],["meta",{"property":"og:title","content":"节流"}],["meta",{"property":"og:description","content":"节流函数 解释： The code above is a JavaScript implementation of a throttle function. The throttle function takes in two parameters: func, which is the function to be throttled, and de..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"XinYang's Blog"}],["meta",{"property":"article:published_time","content":"2022-03-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"节流\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XinYang's Blog\\",\\"url\\":\\"https://xinyang424.com\\"}]}"]]},"headers":[{"level":2,"title":"节流函数","slug":"节流函数","link":"#节流函数","children":[]}],"git":{"contributors":[{"name":"coder-new","email":"2578417052@qq.com","commits":1}]},"readingTime":{"minutes":0.61,"words":184},"filePathRelative":"web/practical-skills/throttle.md","localizedDate":"2022年3月1日","autoDesc":true}`);export{d as comp,k as data};
