import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Ds4AiUcn.js";const e={},o=t(`<p>location是最有用的DOM对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。</p><p>这个对象的独特的地方在于，它既是window的属性，也是document的属性，即<code>window.location</code>和<code>document.location</code>指向同一个对象。location对象不仅保存着当前加载文档的信息，也保存着把URL解析为离散片段后能够通过属性访问信息。</p><p>假设浏览器当前加载的 URL 是 http://foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents，location对象的内容如下表：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">location.hash</td><td style="text-align:left;">&quot;#contents&quot;</td><td style="text-align:left;">URL 散列值（井号后跟零或多个字符），如果没有则为空字符串</td></tr><tr><td style="text-align:left;">location.host</td><td style="text-align:left;">&quot;www.wrox.com:80&quot;</td><td style="text-align:left;">服务器名及端口号</td></tr><tr><td style="text-align:left;">location.hostname</td><td style="text-align:left;">&quot;www.wrox.com&quot;</td><td style="text-align:left;">服务器名</td></tr><tr><td style="text-align:left;">location.href</td><td style="text-align:left;">&quot;http://www.wrox.com:80/WileyCDA/?q=javascript#contents&quot;</td><td style="text-align:left;">当前加载页面的完整 URL。location 的 toString()方法返回这个值</td></tr><tr><td style="text-align:left;">location.pathname</td><td style="text-align:left;">&quot;/WileyCDA/&quot;</td><td style="text-align:left;">URL 中的路径和（或）文件名</td></tr><tr><td style="text-align:left;">location.port</td><td style="text-align:left;">&quot;80&quot;</td><td style="text-align:left;">请求的端口。如果 URL中没有端口，则返回空字符串</td></tr><tr><td style="text-align:left;">location.protocol</td><td style="text-align:left;">&quot;http:&quot;</td><td style="text-align:left;">页面使用的协议。通常是&quot;http:&quot;或&quot;https:&quot;</td></tr><tr><td style="text-align:left;">location.search</td><td style="text-align:left;">&quot;?q=javascript&quot;</td><td style="text-align:left;">URL 的查询字符串。这个字符串以问号开头</td></tr><tr><td style="text-align:left;">location.username</td><td style="text-align:left;">&quot;foouser&quot;</td><td style="text-align:left;">域名前指定的用户名</td></tr><tr><td style="text-align:left;">location.password</td><td style="text-align:left;">&quot;barpassword&quot;</td><td style="text-align:left;">域名前指定的密码</td></tr><tr><td style="text-align:left;">location.origin</td><td style="text-align:left;">&quot;http://www.wrox.com&quot;</td><td style="text-align:left;">URL 的源地址。只读</td></tr></tbody></table><h2 id="查询字符串" tabindex="-1"><a class="header-anchor" href="#查询字符串"><span>查询字符串</span></a></h2><p>location 的多数信息都可以通过上面的属性获取。但是 URL 中的查询字符串并不容易使用。虽然location.search 返回了从问号开始直到 URL 末尾的所有内容，但没有办法逐个访问每个查询参数。</p><p>下面代码示例解析查询的字符串，并返回一个以每个查询参数为属性的对象：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">getQueryStringArgs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 取得没有开头问号的查询字符串</span>
  <span class="token keyword">let</span> qs <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 保存数据的对象</span>
    args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 把每个参数添加到 args 对象</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> qs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">kv</span> <span class="token operator">=&gt;</span> kv<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      args<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> args<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getQueryStringArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>URLSearchParams</strong> URLSearchParams 提供了一组标准 API 方法，通过它们可以检查和修改查询字符串。给URLSearchParams 构造函数传入一个查询字符串，就可以创建一个实例。这个实例上暴露了 get()、set()和 delete()等方法，可以对查询字符串执行相应操作。下面来看一个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> qs <span class="token operator">=</span> <span class="token string">&quot;?q=javascript&amp;num=10&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot; q=javascript&amp;num=10&quot;</span>
searchParams<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot; q=javascript&amp;num=10&amp;page=3&quot;</span>

searchParams<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot; num=10&amp;page=3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数支持 URLSearchParams 的浏览器也支持将 URLSearchParams 的实例用作可迭代对象：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> qs <span class="token operator">=</span> <span class="token string">&quot;?q=javascript&amp;num=10&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> param <span class="token keyword">of</span> searchParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// [&quot;q&quot;, &quot;javascript&quot;]</span>
<span class="token comment">// [&quot;num&quot;, &quot;10&quot;] </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作地址" tabindex="-1"><a class="header-anchor" href="#操作地址"><span>操作地址</span></a></h2><p>可以通过修改 location 对象修改浏览器的地址。首先，最常见的是使用 assign()方法并传入一个 URL，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.wrox.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行代码会立即启动导航到新 URL 的操作，同时在浏览器历史记录中增加一条记录。如果给location.href 或 window.location 设置一个 URL，也会以同一个 URL 值调用 assign()方法。比如，下面两行代码都会执行与显式调用 assign()一样的操作：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">&quot;http://www.wrox.com&quot;</span><span class="token punctuation">;</span>
location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;http://www.wrox.com&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这 3 种修改浏览器地址的方法中，设置 location.href 是最常见的。<br> 修改 location 对象的属性也会修改当前加载的页面。其中，hash、search、hostname、pathname和 port 属性被设置为新值之后都会修改当前 URL，如下面的例子所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 假设当前 URL 为 http://www.wrox.com/WileyCDA/</span>

<span class="token comment">// 把 URL 修改为 http://www.wrox.com/WileyCDA/#section1</span>
location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">&quot;#section1&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 把 URL 修改为 http://www.wrox.com/WileyCDA/?q=javascript</span>
location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">&quot;?q=javascript&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 把 URL 修改为 http://www.somewhere.com/WileyCDA/</span>
location<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string">&quot;www.somewhere.com&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 把 URL 修改为 http://www.somewhere.com/mydir/</span>
location<span class="token punctuation">.</span>pathname <span class="token operator">=</span> <span class="token string">&quot;mydir&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 把 URL 修改为 http://www.somewhere.com:8080/WileyCDA/</span>
location<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 hash 之外，只要修改 location 的一个属性，就会导致页面重新加载新 URL。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>修改 hash 的值会在浏览器历史中增加一条新记录。在早期的 IE 中，点击“后退”和“前进”按钮不会更新 hash 属性，只有点击包含散列的 URL 才会更新 hash 的值。</p></div><p>在上面提到的方式修改URL之后，浏览器历史记录中会增加相应的记录。但当用户单击“后退”按钮时，会导航到前一个页面。如果不希望增加历史记录，可以使用replace()方法。这个方法同样接收一个url参数。但加载后不会增加历史记录。如下所示。当调用replace()之后，页面跳转到新页面，此时用户无法回到前一页，因为无历史记录：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>You won&#39;t be able to get back here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Enjoy this page for a second, because you won&#39;t be coming back here.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
 <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.wrox.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后一个修改地址方法是reload()，它能重新加载当前显示的页面。使用如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新加载，可能是从缓存加载</span>
location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新加载，从服务器加载</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>脚本中位于 reload()调用之后的代码可能执行也可能不执行，这取决于网络延迟和系统资源等因素。为此，最好把 reload()作为最后一行代码。</p>`,26),p=[o];function c(l,i){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","location.html.vue"]]),k=JSON.parse(`{"path":"/web/javascript/location.html","title":"location 对象","lang":"zh-CN","frontmatter":{"title":"location 对象","date":"2022-06-16T00:00:00.000Z","category":["javascript"],"description":"location是最有用的DOM对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。 这个对象的独特的地方在于，它既是window的属性，也是document的属性，即window.location和document.location指向同一个对象。location对象不仅保存着当前加载文档的信息，也保存着把URL解析为离散片段后能够通过属性...","head":[["meta",{"property":"og:url","content":"https://github.com/xinyang424/web/javascript/location.html"}],["meta",{"property":"og:site_name","content":"XinYang"}],["meta",{"property":"og:title","content":"location 对象"}],["meta",{"property":"og:description","content":"location是最有用的DOM对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。 这个对象的独特的地方在于，它既是window的属性，也是document的属性，即window.location和document.location指向同一个对象。location对象不仅保存着当前加载文档的信息，也保存着把URL解析为离散片段后能够通过属性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"XinYang's Blog"}],["meta",{"property":"article:published_time","content":"2022-06-16T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"location 对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XinYang's Blog\\",\\"url\\":\\"https://xinyang424.com\\"}]}"]]},"headers":[{"level":2,"title":"查询字符串","slug":"查询字符串","link":"#查询字符串","children":[]},{"level":2,"title":"操作地址","slug":"操作地址","link":"#操作地址","children":[]}],"git":{"contributors":[{"name":"coder-new","email":"2578417052@qq.com","commits":1}]},"readingTime":{"minutes":4.46,"words":1337},"filePathRelative":"web/javascript/location.md","localizedDate":"2022年6月16日","autoDesc":true}`);export{d as comp,k as data};
