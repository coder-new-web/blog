import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,a as n,d as s,b as t,e}from"./app-Ds4AiUcn.js";const c="/assets/73622606-cc8a7c80-4674-11ea-94dc-1840ce1c4836-BzvWMf-V.png",r="/assets/73622578-b7155280-4674-11ea-823c-ef8d168134e3--FYvsnhT.png",u="/assets/73623120-d614e400-4676-11ea-8fa0-7c8eb063ea9f-BCNhl7hO.png",k="/assets/73622211-c516a380-4673-11ea-8cbb-3f6702d6ec4a-Bo9un4oi.png",d="/assets/73622079-605b4900-4673-11ea-992d-9e6fa1523ba4-TjuRWyEP.png",v={},m=e(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>  jwt 全称 JSON WEB TOKEN，它的作用是是一套开放的标准（RFC 7519），它定义了一种紧凑且自URL安全的方式，以JSON对象的方式在各方之间安全地进行信息传输。由于此信息是经过数字签名的，因此是可以被验证和信任的。可以使用密钥（secret）（使用HMAC算法）或者使用RSA或ECDSA的公有/私有密钥对JWT进行签名。</p><p>  虽然可以对JWT进行加密用来在各方之间提供保密性，但我们还是重点关注下签名的令牌(token)本身，签名的令牌可以验证其中包含的声明的完整性，而加密的令牌则将这些声明在其他方的面前进行隐藏，以提供安全性。当使用公钥/私钥对对令牌进行签名时，签名还可以证明只有持有私钥的一方才是对其进行签名的一方。</p><h2 id="jwt-应用场景" tabindex="-1"><a class="header-anchor" href="#jwt-应用场景"><span>JWT 应用场景</span></a></h2><p>一些常用到JWT的情况：</p><ul><li>授权：这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且支持跨域。</li><li>信息交换：JWT是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对）。此外，由于签名是使用Header和Payload计算的，因此还可以验证内容是否遭到篡改。</li></ul><h2 id="jwt-数据结构" tabindex="-1"><a class="header-anchor" href="#jwt-数据结构"><span>JWT 数据结构</span></a></h2><p>JSON Web Token以紧凑的形式由三部分组成，这些部分由点（.）分隔，分别是：</p><ul><li>Header</li><li>Payload</li><li>Signature</li></ul><p>大致格式如：<code>xxxxx.yyyyy.zzzzz</code></p><h3 id="header" tabindex="-1"><a class="header-anchor" href="#header"><span>Header</span></a></h3><p>  Header通常由两部分组成的一个JSON对象：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。例如：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，将上面的 JSON 对象使用Base64URL编码（转成字符串作为第一部分。</p><h3 id="payload" tabindex="-1"><a class="header-anchor" href="#payload"><span>Payload</span></a></h3><p>第二部分是包含声明的Payload（有效载荷），声明是有关实体（通常是用户信息）以及一些额外数据的说明，用来传递实际的数据。声明有三种类型：</p>`,16),b=n("strong",null,"标准注册的声明",-1),g={href:"https://www.iana.org/assignments/jwt/jwt.xhtml",target:"_blank",rel:"noopener noreferrer"},h=n("ul",null,[n("li",null,"iss: jwt签发者"),n("li",null,"sub: jwt所面向的用户"),n("li",null,"aud: 接收jwt的一方"),n("li",null,"exp: jwt的过期时间，这个过期时间必须要大于签发时间"),n("li",null,"nbf: 定义在什么时间之前，该jwt都是不可用的."),n("li",null,"iat: jwt的签发时间"),n("li",null,"jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。")],-1),y=n("strong",null,"公共的声明",-1),w={href:"https://www.iana.org/assignments/jwt/jwt.xhtml",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,[n("strong",null,"私有的声明"),s("：这些是自定义的声明，用于在双方同意使用它们的情况下共享信息，而不是注册或公开声明。一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。")],-1),q=e(`<p>例如，定义一个payload：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 标准声明</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 公共声明</span>
  <span class="token property">&quot;admin&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 自定义</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  然后，同样地对payload进行Base64Url编码，作为JSON Web Token的第二部分。</p><p>  对于已签名的令牌(token)，尽管信息可以防止篡改，但任何人都可以读取。除非将其加密，否则请勿将敏感信息放入JWT的Payload或Header元素中。</p><h3 id="signature" tabindex="-1"><a class="header-anchor" href="#signature"><span>Signature</span></a></h3><p>  Signature 部分是对前两部分的签名，防止数据篡改。</p><p>  要生成签名部分，需求根据编码的Header，编码的Payload，一个指定的密钥（secret），通过Header指定的算法（默认是HMAC SHA256算法），然后生成签名。</p><p>  例如，如果要使用HMAC SHA256算法，则将通过以下方式创建签名：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token constant">HMACSHA256</span><span class="token punctuation">(</span>
  <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span>
  <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>
  secret<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成-jwt" tabindex="-1"><a class="header-anchor" href="#生成-jwt"><span>生成 JWT</span></a></h2><p>  最后把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用&quot;点&quot;（.）分隔，就可以返回给用户。</p><p>  输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。</p><p>  下面显示了一个JWT，它已对先前的Header和Payload进行了编码，并用一个密钥（secret）进行签名。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJzdWIi0iIxMjMONTY30DkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaXNTb2NpYWwi0nRydWV9.
4pcPyMD89o1PSyXnrXcjTwXyr4BsezdI1AVTmud2fu4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),S={href:"https://jwt.io/",target:"_blank",rel:"noopener noreferrer"},j=e(`<h2 id="base64url" tabindex="-1"><a class="header-anchor" href="#base64url"><span>Base64URL</span></a></h2><p>  前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>  JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p><h2 id="jwt如何使用" tabindex="-1"><a class="header-anchor" href="#jwt如何使用"><span>JWT如何使用？</span></a></h2><p>  在身份验证中，当用户使用其凭据成功登录后，将返回JSON Web Token。由于令牌（token）是凭据，因此必须格外小心以防止安全问题。通常，令牌的有效时间不应超过要求的时间。</p><p>  由于缺乏安全性，也不应该将敏感的会话数据存储在浏览器中。</p><p>  当用户想访问受保护的路由或者资源时，用户代理（比如浏览器）需要带上JWT，一般是在请求头里加入Authorization，并加上Bearer标注：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;Authorization&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Bearer &#39;</span> <span class="token operator">+</span> token
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  在某些情况下，这可以是无状态授权机制。服务器的受保护路由将在Authorization标头中检查有效的JWT ，如果存在，则将允许用户访问受保护的资源。如果JWT包含必要的数据，则可以减少查询数据库中某些操作的需求，尽管这种情况并非总是如此。<br>   如果令牌是在Authorization标头中发送的，则不会有跨域资源共享（CORS）的问题，因为不使用cookie。<br>   另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。<br>   下图显示了如何获取JWT并将其用于访问API或资源：</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>应用程序或客户端向授权服务器请求授权。</li><li>授予授权后，授权服务器会将访问令牌返回给应用程序。</li><li>该应用程序使用访问令牌来访问受保护的资源（例如API）。</li></ol><h2 id="为什么要使用-jwt" tabindex="-1"><a class="header-anchor" href="#为什么要使用-jwt"><span>为什么要使用 JWT</span></a></h2><h3 id="swt-和-saml-对比" tabindex="-1"><a class="header-anchor" href="#swt-和-saml-对比"><span>SWT 和 SAML 对比</span></a></h3><p>  让我们谈谈与简单Web令牌（Simple Web Tokens，SWT）和 安全性声明标记语言令牌（Security Assertion Markup Language Tokens，SAML）相比，JSON Web令牌（JWT）的好处。</p><p>  由于JSON不如XML冗长，在编码时JSON的大小也较小，从而使JWT比SAML更为紧凑。这使得JWT是在HTML和HTTP环境中传递的不错的选择。</p><p>  在安全方面，SWT只能使用HMAC算法的共享密钥对其进行对称签名。但是，JWT和SAML令牌可以使用X.509证书形式的公用/专用密钥对进行签名。与签名JSON的简单性相比，使用XML数字签名对XML进行签名而不引入一些的安全漏洞是非常困难的。</p><p>  JSON解析器在大多数编程语言中都很常见，因为它们直接映射到对象。相反，XML没有自然的文档到对象映射。与SAML断言相比，JWT更加简单易用。</p><p>编码的JWT和编码的SAML的长度比较：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="传统session-cookie的认证对比" tabindex="-1"><a class="header-anchor" href="#传统session-cookie的认证对比"><span>传统Session/Cookie的认证对比</span></a></h3><h4 id="基于cookie的身份认证" tabindex="-1"><a class="header-anchor" href="#基于cookie的身份认证"><span>基于Cookie的身份认证</span></a></h4><p>身份认证的一般流程：</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>  但是http是无状态协议，这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求。 传统的解决方案是创建所谓的“会话（Session）”，会话分为两个部分：</p><ol><li>存储在服务端上的对象，用于记住用户是否仍在登录，对其个人资料的引用等。</li><li>客户端上的cookie，其中存储了某种ID，可以在服务器上根据会话对象的ID对其进行引用。</li></ol><p>身份验证过程如下：</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>  通过从登录页面向服务端发送用户名/密码组合来创建新会话。如果服务器可以使用该用户名和密码来匹配用户，它将在服务器上生成一个新的会话对象，并在客户端上设置一个带有该会话ID的cookie。后续用户发出的请求需要带上cookie，服务端就可以验证是哪个用户以及验证会话是否有效。</p><h4 id="基于cookie认证的缺点" tabindex="-1"><a class="header-anchor" href="#基于cookie认证的缺点"><span>基于Cookie认证的缺点</span></a></h4><p>  以上模式在单机上没有问题。问题在于扩展性不好，存在以下问题：</p><ul><li>多个服务端：当使用多个后端进行身份验证时，事情可能会变得复杂（例如，可以通过中央应用服务器代理所有请求，然后需要了解每个辅助服务的所有逻辑，或者每个服务都可以实现复杂的服务器间通信（和CORS），以使用中央身份验证服务器验证传入的会话ID。在任何一种情况下，都需要在应用服务器上增加额外的负载，并且需要维护更复杂的互连）。</li><li>会话：需要存储在内存，数据库或Redis之类的键值存储中的某个位置；并且需要对其进行管理，以使其在到期或无效时被删除。</li><li>可伸缩性差：扩展服务器时需要扩展会话存储，增加了复杂性。</li><li>性能问题：当会话需要存储在服务器上时，每个数据库请求都需要进行很多数据库/存储查找，这会使服务器陷入瘫痪。</li><li>CSRF：如果正在使用cookie，则需要额外的安全性来防止跨站点请求攻击，因为cookie会随该站点的任何请求一起自动发送到服务器。</li><li>CORS：Cookie + CORS在不同的域中表现不佳（实际上，真正的跨域根本不起作用）。</li></ul><p>而使用JWT，你可以使用应用程序注册自己（与使用老式应用程序几乎相同），然后使用凭据（例如，用户名/密码或第三方OAuth）登录。但是服务器不会进行会话和设置Cookie，而是向你发送JSON Web令牌。然后，你可以使用该令牌来完成对服务器的任何操作。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="基于-nodejs-express-实践" tabindex="-1"><a class="header-anchor" href="#基于-nodejs-express-实践"><span>基于 Nodejs + Express 实践</span></a></h2><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i jsonwebtoken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>往客户端发送jwt：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../utils/db&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/getuser&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mysql <span class="token operator">=</span> <span class="token string">&#39;SELECT s_id,s_disable FROM o_student WHERE s_tel = ? AND s_password = ?;&#39;</span><span class="token punctuation">;</span>
    <span class="token function">db</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span> <span class="token punctuation">[</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">500</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
                <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
                <span class="token literal-property property">token</span><span class="token operator">:</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;PrivateKey&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token string">&#39;168h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>查看 jwt.sign 类型</summary><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sign</span><span class="token punctuation">(</span>
    payload<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Buffer <span class="token operator">|</span> object<span class="token punctuation">,</span>
    secretOrPrivateKey<span class="token operator">:</span> Secret<span class="token punctuation">,</span>
    options<span class="token operator">?</span><span class="token operator">:</span> SignOptions<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Secret</span> <span class="token operator">=</span>
    <span class="token operator">|</span> <span class="token builtin">string</span>
    <span class="token operator">|</span> Buffer
    <span class="token operator">|</span> KeyObject
    <span class="token operator">|</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Buffer<span class="token punctuation">;</span> passphrase<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SignOptions</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * Signature algorithm. Could be one of these values :
     * - HS256:    HMAC using SHA-256 hash algorithm (default)
     * - HS384:    HMAC using SHA-384 hash algorithm
     * - HS512:    HMAC using SHA-512 hash algorithm
     * - RS256:    RSASSA using SHA-256 hash algorithm
     * - RS384:    RSASSA using SHA-384 hash algorithm
     * - RS512:    RSASSA using SHA-512 hash algorithm
     * - ES256:    ECDSA using P-256 curve and SHA-256 hash algorithm
     * - ES384:    ECDSA using P-384 curve and SHA-384 hash algorithm
     * - ES512:    ECDSA using P-521 curve and SHA-512 hash algorithm
     * - none:     No digital signature or MAC value included
     */</span>
    algorithm<span class="token operator">?</span><span class="token operator">:</span> Algorithm <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    keyid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token comment">/** expressed in seconds or a string describing a time span [zeit/ms](https://github.com/zeit/ms.js).  Eg: 60, &quot;2 days&quot;, &quot;10h&quot;, &quot;7d&quot; */</span>
    expiresIn<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token comment">/** expressed in seconds or a string describing a time span [zeit/ms](https://github.com/zeit/ms.js).  Eg: 60, &quot;2 days&quot;, &quot;10h&quot;, &quot;7d&quot; */</span>
    notBefore<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    audience<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    subject<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    issuer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    jwtid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    mutatePayload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    noTimestamp<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    header<span class="token operator">?</span><span class="token operator">:</span> JwtHeader <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    encoding<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    allowInsecureKeySizes<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    allowInvalidAsymmetricKeyTypes<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// https://github.com/auth0/node-jsonwebtoken#algorithms-supported</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Algorithm</span> <span class="token operator">=</span>
    <span class="token operator">|</span> <span class="token string">&quot;HS256&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;HS384&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;HS512&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;RS256&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;RS384&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;RS512&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;ES256&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;ES384&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;ES512&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;PS256&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;PS384&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;PS512&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// standard names https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">JwtHeader</span> <span class="token punctuation">{</span>
    alg<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Algorithm<span class="token punctuation">;</span>
    typ<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    cty<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    crit<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> JwtHeader<span class="token punctuation">,</span> <span class="token string">&quot;crit&quot;</span><span class="token operator">&gt;&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    kid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    jku<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    x5u<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token string">&quot;x5t#S256&quot;</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    x5t<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    x5c<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>后台拿到前端的 JWT 进行解密：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jsonwebtoken&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 拦截所有请求</span>
router<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token<span class="token punctuation">;</span>
   
	<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 对如果是登录请求进行放行</span>
		<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 非登录接口但是请求头不携带token的返回错误</span>
		<span class="token comment">//没有token</span>
		res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">//非登录接口并且请求头携带token，进行解密token</span>
		jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">&quot;PrivateKey&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> decoded</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// res.status(401).send({ msg: &#39;token错误,验证失败&#39; }).end()</span>
				res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// token验证成功根据之前保存的信息，查询一遍是不是自己平台的用户</span>
				<span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from o_student where s_id=&quot;</span> <span class="token operator">+</span> decoded<span class="token punctuation">.</span>data<span class="token punctuation">.</span>s_id <span class="token operator">+</span> <span class="token string">&quot;;&quot;</span><span class="token punctuation">;</span>
				<span class="token function">db</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
							<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
							res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>查看 jwt.verify 类型</summary><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> secretOrPublicKey<span class="token operator">:</span> Secret<span class="token punctuation">,</span> options<span class="token operator">:</span> VerifyOptions <span class="token operator">&amp;</span> <span class="token punctuation">{</span> complete<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> Jwt<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Secret</span> <span class="token operator">=</span>
    <span class="token operator">|</span> <span class="token builtin">string</span>
    <span class="token operator">|</span> Buffer
    <span class="token operator">|</span> KeyObject
    <span class="token operator">|</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Buffer<span class="token punctuation">;</span> passphrase<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// https://github.com/auth0/node-jsonwebtoken#algorithms-supported</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Algorithm</span> <span class="token operator">=</span>
    <span class="token operator">|</span> <span class="token string">&quot;HS256&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;HS384&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;HS512&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;RS256&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;RS384&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;RS512&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;ES256&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;ES384&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;ES512&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;PS256&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;PS384&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;PS512&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VerifyOptions</span> <span class="token punctuation">{</span>
    algorithms<span class="token operator">?</span><span class="token operator">:</span> Algorithm<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    audience<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> RegExp <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> RegExp<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    clockTimestamp<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    clockTolerance<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token comment">/** return an object with the decoded \`{ payload, header, signature }\` instead of only the usual content of the payload. */</span>
    complete<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    issuer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    ignoreExpiration<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    ignoreNotBefore<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    jwtid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * If you want to check \`nonce\` claim, provide a string value here.
     * It is used on Open ID for the ID Tokens. ([Open ID implementation notes](https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes))
     */</span>
    nonce<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    subject<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    maxAge<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    allowInvalidAsymmetricKeyTypes<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Jwt</span> <span class="token punctuation">{</span>
    header<span class="token operator">:</span> JwtHeader<span class="token punctuation">;</span>
    payload<span class="token operator">:</span> JwtPayload <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    signature<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// standard names https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">JwtHeader</span> <span class="token punctuation">{</span>
    alg<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Algorithm<span class="token punctuation">;</span>
    typ<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    cty<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    crit<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> JwtHeader<span class="token punctuation">,</span> <span class="token string">&quot;crit&quot;</span><span class="token operator">&gt;&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    kid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    jku<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    x5u<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token string">&quot;x5t#S256&quot;</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    x5t<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    x5c<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// standard claims https://datatracker.ietf.org/doc/html/rfc7519#section-4.1</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">JwtPayload</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
    iss<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    sub<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    aud<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    exp<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    nbf<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    iat<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    jti<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="参考连接" tabindex="-1"><a class="header-anchor" href="#参考连接"><span>参考连接</span></a></h2>`,43),x={href:"https://jwt.io/introduction/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://base64.guru/standards/base64url",target:"_blank",rel:"noopener noreferrer"},J={href:"https://auth0.com/resources/ebooks/jwt-handbook",target:"_blank",rel:"noopener noreferrer"};function A(_,W){const a=o("ExternalLinkIcon");return l(),i("div",null,[m,n("ul",null,[n("li",null,[b,s("：这些是一组非强制性的但建议使用的预定义字段集，用来提供有用、可互操作的声明。以下官方提供的一些字段，完整字段可以"),n("a",g,[s("查看标准文档"),t(a)]),h]),n("li",null,[y,s("：这些声明可以由使用JWT的人进行自定义. 但是为了避免冲突，这些声明应该在"),n("a",w,[s("IANA JSON Web Token Registry"),t(a)]),s("中定义过，或者被定义为包含一个抗冲突名称空间的URI。")]),f]),q,n("p",null,[s("如果你想实践下，可以使用"),n("a",S,[s("jwt.io.debugger"),t(a)]),s("在线解码、验证及生成JWT。")]),j,n("ul",null,[n("li",null,[n("a",x,[s("Introduction to JSON Web Tokens"),t(a)])]),n("li",null,[n("a",T,[s("base64url介绍"),t(a)])]),n("li",null,[n("a",J,[s("jwt手册"),t(a)])])])])}const N=p(v,[["render",A],["__file","jwt.html.vue"]]),O=JSON.parse(`{"path":"/back/jwt.html","title":"JWT","lang":"zh-CN","frontmatter":{"title":"JWT","date":"2023-06-20T00:00:00.000Z","icon":"jsonwebtoken","order":4,"description":"简介 jwt 全称 JSON WEB TOKEN，它的作用是是一套开放的标准（RFC 7519），它定义了一种紧凑且自URL安全的方式，以JSON对象的方式在各方之间安全地进行信息传输。由于此信息是经过数字签名的，因此是可以被验证和信任的。可以使用密钥（secret）（使用HMAC算法）或者使用RSA或ECDSA的公有/私有密钥对JWT进行签名。 虽然...","head":[["meta",{"property":"og:url","content":"https://github.com/xinyang424/back/jwt.html"}],["meta",{"property":"og:site_name","content":"XinYang"}],["meta",{"property":"og:title","content":"JWT"}],["meta",{"property":"og:description","content":"简介 jwt 全称 JSON WEB TOKEN，它的作用是是一套开放的标准（RFC 7519），它定义了一种紧凑且自URL安全的方式，以JSON对象的方式在各方之间安全地进行信息传输。由于此信息是经过数字签名的，因此是可以被验证和信任的。可以使用密钥（secret）（使用HMAC算法）或者使用RSA或ECDSA的公有/私有密钥对JWT进行签名。 虽然..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"XinYang's Blog"}],["meta",{"property":"article:published_time","content":"2023-06-20T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JWT\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XinYang's Blog\\",\\"url\\":\\"https://xinyang424.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"JWT 应用场景","slug":"jwt-应用场景","link":"#jwt-应用场景","children":[]},{"level":2,"title":"JWT 数据结构","slug":"jwt-数据结构","link":"#jwt-数据结构","children":[{"level":3,"title":"Header","slug":"header","link":"#header","children":[]},{"level":3,"title":"Payload","slug":"payload","link":"#payload","children":[]},{"level":3,"title":"Signature","slug":"signature","link":"#signature","children":[]}]},{"level":2,"title":"生成 JWT","slug":"生成-jwt","link":"#生成-jwt","children":[]},{"level":2,"title":"Base64URL","slug":"base64url","link":"#base64url","children":[]},{"level":2,"title":"JWT如何使用？","slug":"jwt如何使用","link":"#jwt如何使用","children":[]},{"level":2,"title":"为什么要使用 JWT","slug":"为什么要使用-jwt","link":"#为什么要使用-jwt","children":[{"level":3,"title":"SWT 和 SAML 对比","slug":"swt-和-saml-对比","link":"#swt-和-saml-对比","children":[]},{"level":3,"title":"传统Session/Cookie的认证对比","slug":"传统session-cookie的认证对比","link":"#传统session-cookie的认证对比","children":[]}]},{"level":2,"title":"基于 Nodejs + Express 实践","slug":"基于-nodejs-express-实践","link":"#基于-nodejs-express-实践","children":[]},{"level":2,"title":"参考连接","slug":"参考连接","link":"#参考连接","children":[]}],"git":{"contributors":[{"name":"coder-new","email":"2578417052@qq.com","commits":1}]},"readingTime":{"minutes":12.46,"words":3739},"filePathRelative":"back/jwt.md","localizedDate":"2023年6月20日","autoDesc":true}`);export{N as comp,O as data};
